package coap.kafka;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import org.eclipse.californium.core.CoapClient;
import org.eclipse.californium.core.CoapHandler;
import org.eclipse.californium.core.CoapObserveRelation;
import org.eclipse.californium.core.CoapResponse;
import org.eclipse.californium.core.coap.MediaTypeRegistry;

import org.eclipse.californium.core.coap.Request;
import org.eclipse.californium.core.coap.Response;

public class CoapIoTClient {
	
	private static String url = "coap://[aaaa::c30c:0:0:2]:5683/sensors/light";
	
	public static void main(String[] args) {
		Request request = Request.newGet();
		
		final ReCEP recep = new ReCEP();
		
		request.setURI(url);
		request.setObserve();
		
		try {
			while (true) {
				request.send();
				Response response = request.waitForResponse(1000);
				
				if (null != response) {
					String responseString = response.toString();
					System.out.println("NOTIFICATION: " + responseString);

					String delim = "[;]";
					String[] tokens = responseString.split(delim);
					for (int i=0; i < tokens.length(); i++)
						System.out.println(tokens[i]);
/*					int mote_id = Integer.parseInt(tokens[0]);
					int val = Integer.parseInt(tokens[1]);
					recep.send(mote_id, val);
*/					
				} //if (null...)
				else {
					System.out.println("No Response ");
				}
			} //while
		} catch (InterruptedException e) {
            System.err.println("Receiving of response interrupted: " + e.getMessage());
            System.exit(-1);
        }
	}
	
	
	public static void me(String[] args) {
			
		
		//this example assumes er-rest-example-server is running on contiki/cooja platform
		CoapClient client = new CoapClient("coap://[aaaa::c30c:0:0:2]:5683/sensors/light");
		//final CoapKafkaProduce kafka = new CoapKafkaProduce();
		final ReCEP recep = new ReCEP();
		
		// wait for user
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		try { br.readLine(); } catch (IOException e) { System.out.println("FAILED");}
		
		// observe
		
		System.out.println("OBSERVE (press enter to exit)");
		
		CoapObserveRelation relation = client.observe(
				new CoapHandler() {
					@Override public void onLoad(CoapResponse response) {
						String content = response.getResponseText();
						String delim = "[;]";
						String[] tokens = content.split(delim);
						int mote_id = Integer.parseInt(tokens[0]);
						int val = Integer.parseInt(tokens[1]);
						recep.send(mote_id, val);
						System.out.println("NOTIFICATION: " + content);
						}
							
					@Override public void onError() {
						System.err.println("OBSERVING FAILED (press enter to exit)");
						}
					});
		
		
			// wait for user
				try { br.readLine(); } catch (IOException e) { }
		
				System.out.println("CANCELLATION");
			
			//relation.proactiveCancel();
		}

}
