package coap.kafka;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import org.eclipse.californium.core.CoapClient;
import org.eclipse.californium.core.CoapHandler;
import org.eclipse.californium.core.CoapObserveRelation;
import org.eclipse.californium.core.CoapResponse;
import org.eclipse.californium.core.coap.MediaTypeRegistry;

public class CoapIoTClient {
	
	public static void main(String[] args) {
			
			//this example assumes er-rest-example-server is running on contiki/cooja platform
			CoapClient client = new CoapClient("coap://[aaaa::c30c:0:0:2]:5683/sensors/light");
			//final CoapKafkaProduce kafka = new CoapKafkaProduce();
			final ReCEP recep = new ReCEP();
	
			/*System.out.println("SYNCHRONOUS");
			
			// synchronous
			String content1 = client.get().getResponseText();
			System.out.println("RESPONSE 1: " + content1);
			
			CoapResponse resp2 = client.post("payload", MediaTypeRegistry.TEXT_PLAIN);
			System.out.println("RESPONSE 2 CODE: " + resp2.getCode());
			
			// asynchronous
			*/
			System.out.println("ASYNCHRONOUS (press enter to continue)");
			
			client.get(new CoapHandler() {
				@Override public void onLoad(CoapResponse response) {
					String content = response.getResponseText();
					System.out.println("RESPONSE 3: " + content);
				}
				
				@Override public void onError() {
					System.err.println("FAILED");
				}
			});

			// wait for user
/**/			
			// observe

			System.out.println("OBSERVE (press enter to exit)");
			
			CoapObserveRelation relation = client.observe(
					new CoapHandler() {
						@Override public void onLoad(CoapResponse response) {
							String content = response.getResponseText();
							String delim = "[;]";
							String[] tokens = content.split(delim);
							int mote_id = Integer.parseInt(tokens[0]);
							int val = Integer.parseInt(tokens[1]);
							recep.send(mote_id, val);
							System.out.println("NOTIFICATION: " + content);
						}
						
						@Override public void onError() {
							System.err.println("OBSERVING FAILED (press enter to exit)");
						}
					});
			
		
			System.out.println("CANCELLATION");
			
			//relation.proactiveCancel();
		}

}
